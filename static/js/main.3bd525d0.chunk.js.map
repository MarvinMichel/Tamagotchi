{"version":3,"sources":["components/Buttons/InfoButton.js","actions/index.js","components/Character/Character.js","components/Buttons/KickButton.js","components/Buttons/DanceButton.js","components/Buttons/WaveButton.js","components/Controls/Controls.js","components/Buttons/CloseButton.js","components/Modal/Modal.js","App.js","serviceWorker.js","reducers/info.js","reducers/index.js","index.js"],"names":["InfoButton","dispatch","useDispatch","className","onClick","type","title","Character","useEffect","scene","renderer","camera","model","possibleAnims","mixer","idle","clock","THREE","loaderAnim","document","getElementById","canvas","querySelector","background","fog","antialias","shadowMap","enabled","setPixelRatio","window","devicePixelRatio","body","appendChild","domElement","innerWidth","innerHeight","position","z","x","y","groot_txt","load","flipY","groot_mtl","map","color","skinning","GLTFLoader","gltf","fileAnimations","animations","traverse","o","isMesh","castShadow","recieveShadow","material","scale","set","add","remove","clips","filter","val","name","clip","findByName","tracks","splice","clipAction","idelAnim","play","undefined","error","console","hemiLight","d","dirLight","shadow","mapSize","near","far","left","right","top","bottom","floorGeometry","floorMaterial","shininess","floor","rotation","Math","PI","geometry","sphere","init","update","getDelta","width","height","canvasPixelWidth","canvasPixelHeight","needResize","setSize","resizeRendererToDisplaySize","aspect","clientWidth","clientHeight","updateProjectionMatrix","render","requestAnimationFrame","buttons","querySelectorAll","toggleButtons","flag","forEach","button","classList","toggle","setAttribute","removeAttribute","playModifierAnimation","from","fSpeed","to","tSpeed","reset","setLoop","crossFadeTo","setTimeout","_clip","duration","addEventListener","e","preventDefault","id","KickButton","role","aria-label","DanceButton","WaveButton","Controls","CloseButton","viewBox","fill","tabIndex","require","config","Modal","useState","powers","setPowers","stats","setStats","isOpen","useSelector","state","ReactModal","setAppElement","fetch","then","response","json","data","powerstats","Object","keys","values","catch","log","onRequestClose","close","power","index","key","stat","style","App","Boolean","location","hostname","match","infoReducer","action","allReducers","combineReducers","store","createStore","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3bd525d0.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\nimport { useDispatch } from 'react-redux';\nimport { open } from '../../actions';\n\nconst InfoButton = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <button className=\"info\" onClick={() => dispatch(open())} title=\"Info\">\n        &#9432;\n      </button>\n    </>\n  );\n};\n\nexport default InfoButton;\n","export const open = () => {\n  return {\n    type: 'TRIGGER',\n  };\n};\n","import React, { useEffect } from 'react';\nimport './index.css';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n\nconst Character = () => {\n  useEffect(() => {\n    let scene,\n      renderer,\n      camera,\n      model,\n      possibleAnims,\n      mixer,\n      idle,\n      clock = new THREE.Clock(),\n      loaderAnim = document.getElementById('js-loader');\n\n    init();\n\n    function init() {\n      // Initialize model\n      const MODEL_PATH = 'model/groot.glb';\n\n      const canvas = document.querySelector('#c');\n      const backgroundColor = 0xf1f1f1;\n\n      // Initialize scene, background and fog\n      scene = new THREE.Scene();\n      scene.background = new THREE.Color(backgroundColor);\n      scene.fog = new THREE.Fog(backgroundColor, 60, 100);\n\n      // Initialize renderer\n      renderer = new THREE.WebGLRenderer({ canvas, antialias: true });\n      renderer.shadowMap.enabled = true;\n      renderer.setPixelRatio(window.devicePixelRatio);\n      document.body.appendChild(renderer.domElement);\n\n      // Initialize camera\n      camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);\n      camera.position.z = 30;\n      camera.position.x = 0;\n      camera.position.y = -3;\n\n      // Add texture materials\n      let groot_txt = new THREE.TextureLoader().load('model/textures/groot_diffuse.png');\n\n      groot_txt.flipY = false;\n\n      const groot_mtl = new THREE.MeshPhongMaterial({\n        map: groot_txt,\n        color: 0xffffff,\n        skinning: true,\n      });\n\n      // Create loader\n      var loader = new GLTFLoader();\n\n      loader.load(\n        MODEL_PATH,\n        gltf => {\n          // Function that runs when model is loaded\n          model = gltf.scene;\n          let fileAnimations = gltf.animations;\n\n          // Find meshs\n          model.traverse(o => {\n            if (o.isMesh) {\n              o.castShadow = true;\n              o.recieveShadow = true;\n              o.material = groot_mtl;\n            }\n          });\n\n          // Set models initial scale\n          model.scale.set(2, 2, 2);\n\n          // Make model stand on floor\n          model.position.y = -10;\n\n          scene.add(model);\n          loaderAnim.remove();\n\n          mixer = new THREE.AnimationMixer(model);\n\n          // Extract all animations from model exept idle\n          let clips = fileAnimations.filter(val => val.name !== 'idle');\n\n          possibleAnims = clips.map(val => {\n            let clip = THREE.AnimationClip.findByName(clips, val.name);\n            clip.tracks.splice(3, 3);\n            clip.tracks.splice(9, 3);\n            clip = mixer.clipAction(clip);\n            return clip;\n          });\n\n          let idelAnim = THREE.AnimationClip.findByName(fileAnimations, 'idle');\n\n          idle = mixer.clipAction(idelAnim);\n          idle.play();\n        },\n        undefined,\n        error => console.error(error)\n      );\n\n      // Initalize lights\n      let hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.61);\n      hemiLight.position.set(0, 50, 0);\n      scene.add(hemiLight);\n\n      let d = 8.25;\n      let dirLight = new THREE.DirectionalLight(0xffffff, 0.54);\n      dirLight.position.set(-8, 12, 8);\n      dirLight.castShadow = true;\n      dirLight.shadow.mapSize = new THREE.Vector2(1024, 1024);\n      dirLight.shadow.camera.near = 0.1;\n      dirLight.shadow.camera.far = 1500;\n      dirLight.shadow.camera.left = d * -1;\n      dirLight.shadow.camera.right = d;\n      dirLight.shadow.camera.top = d;\n      dirLight.shadow.camera.bottom = d * -1;\n      scene.add(dirLight);\n\n      // Initialize floor\n      let floorGeometry = new THREE.PlaneGeometry(5000, 5000, 1, 1);\n      let floorMaterial = new THREE.MeshPhongMaterial({\n        color: 0xeeeeee,\n        shininess: 0,\n      });\n\n      let floor = new THREE.Mesh(floorGeometry, floorMaterial);\n      floor.rotation.x = -0.5 * Math.PI;\n      floor.recieveShadow = true;\n      floor.position.y = -10;\n      scene.add(floor);\n\n      let geometry = new THREE.SphereGeometry(8, 32, 32);\n      let material = new THREE.MeshBasicMaterial({ color: 13940595 });\n      let sphere = new THREE.Mesh(geometry, material);\n      sphere.position.z = -15;\n      sphere.position.y = -2.5;\n      sphere.position.x = -0.25;\n      scene.add(sphere);\n    }\n\n    function update() {\n      if (mixer) {\n        mixer.update(clock.getDelta());\n      }\n\n      if (resizeRendererToDisplaySize(renderer)) {\n        const canvas = renderer.domElement;\n        camera.aspect = canvas.clientWidth / canvas.clientHeight;\n        camera.updateProjectionMatrix();\n      }\n      renderer.render(scene, camera);\n      requestAnimationFrame(update);\n    }\n    update();\n\n    // Resize scene with canvas\n    function resizeRendererToDisplaySize(renderer) {\n      const canvas = renderer.domElement;\n      let width = window.innerWidth;\n      let height = window.innerHeight;\n      let canvasPixelWidth = canvas.width / window.devicePixelRatio;\n      let canvasPixelHeight = canvas.height / window.devicePixelRatio;\n\n      const needResize = canvasPixelWidth !== width || canvasPixelHeight !== height;\n      if (needResize) {\n        renderer.setSize(width, height, false);\n      }\n      return needResize;\n    }\n\n    const buttons = document.querySelectorAll('button');\n    const danceButton = document.querySelector('.dance');\n    danceButton.addEventListener('click', e => {\n      e.preventDefault();\n      playModifierAnimation(idle, 0.25, possibleAnims[0], 0.25);\n    });\n\n    const waveButton = document.querySelector('.wave');\n    waveButton.addEventListener('click', e => {\n      e.preventDefault();\n      playModifierAnimation(idle, 0.25, possibleAnims[2], 0.25);\n    });\n\n    const kickButton = document.querySelector('.kick');\n    kickButton.addEventListener('click', e => {\n      e.preventDefault();\n      playModifierAnimation(idle, 0.25, possibleAnims[1], 0.25);\n    });\n\n    function toggleButtons(flag = false) {\n      buttons.forEach(button => {\n        button.classList.toggle('disabled');\n        if (flag) {\n          button.setAttribute('disabled', flag);\n        } else {\n          button.removeAttribute('disabled');\n        }\n      });\n    }\n\n    function playModifierAnimation(from, fSpeed, to, tSpeed) {\n      to.reset();\n      to.setLoop(THREE.LoopOnce);\n      to.play();\n      from.crossFadeTo(to, fSpeed, true);\n      toggleButtons(true);\n      setTimeout(() => {\n        from.enabled = true;\n        to.crossFadeTo(from, tSpeed, true);\n        toggleButtons();\n      }, to._clip.duration * 1000 - (tSpeed + fSpeed) * 1000);\n    }\n  });\n\n  return <canvas id=\"c\"></canvas>;\n};\n\nexport default Character;\n","import React from 'react';\nimport './index.css';\n\nconst KickButton = () => (\n  <button className=\"kick\">\n    <span role=\"img\" aria-label=\"Kick\" title=\"Kick\">\n      🍆\n    </span>\n  </button>\n);\n\nexport default KickButton;\n","import React from 'react';\nimport './index.css';\n\nconst DanceButton = () => {\n  return (\n    <button className=\"dance\">\n      <span role=\"img\" aria-label=\"Dance\" title=\"Dance\">\n        🕺\n      </span>\n    </button>\n  );\n};\n\nexport default DanceButton;\n","import React from 'react';\nimport './index.css';\n\nconst WaveButton = () => (\n  <button className=\"wave\">\n    <span role=\"img\" aria-label=\"Wave\" title=\"Say Hello\">\n      👋\n    </span>\n  </button>\n);\n\nexport default WaveButton;\n","import React from 'react';\nimport KickButton from '../Buttons/KickButton';\nimport DanceButton from '../Buttons/DanceButton';\nimport WaveButton from '../Buttons/WaveButton';\nimport './index.css';\n\nconst Controls = () => (\n  <form>\n    <KickButton />\n    <DanceButton />\n    <WaveButton />\n  </form>\n);\n\nexport default Controls;\n","import React from 'react';\nimport './index.css';\nimport { useDispatch } from 'react-redux';\nimport { open } from '../../actions';\n\nconst CloseButton = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <svg id=\"close\" viewBox=\"0 0 24 24\" fill=\"none\" onClick={() => dispatch(open())} tabIndex=\"1\">\n      <path d=\"M6.2253 4.81108C5.83477 4.42056 5.20161 4.42056 4.81108 4.81108C4.42056 5.20161 4.42056 5.83477 4.81108 6.2253L10.5858 12L4.81114 17.7747C4.42062 18.1652 4.42062 18.7984 4.81114 19.1889C5.20167 19.5794 5.83483 19.5794 6.22535 19.1889L12 13.4142L17.7747 19.1889C18.1652 19.5794 18.7984 19.5794 19.1889 19.1889C19.5794 18.7984 19.5794 18.1652 19.1889 17.7747L13.4142 12L19.189 6.2253C19.5795 5.83477 19.5795 5.20161 19.189 4.81108C18.7985 4.42056 18.1653 4.42056 17.7748 4.81108L12 10.5858L6.2253 4.81108Z\" />\n    </svg>\n  );\n};\n\nexport default CloseButton;\n","import React, { useState, useEffect } from 'react';\nimport ReactModal from 'react-modal';\nimport CloseButton from '../Buttons/CloseButton';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { open } from '../../actions';\nimport './index.css';\nrequire('dotenv').config();\n\nconst Modal = () => {\n  const [powers, setPowers] = useState([]);\n  const [stats, setStats] = useState([]);\n\n  const isOpen = useSelector(state => state.isOpen);\n  const dispatch = useDispatch();\n\n  ReactModal.setAppElement('#root');\n\n  useEffect(() => {\n    const url = 'https://superheroapi.com/api/' + process.env.REACT_APP_API_KEY + '/303';\n    fetch(url)\n      .then(response => response.json())\n      .then(data => data.powerstats)\n      .then(powerstats => {\n        setPowers(Object.keys(powerstats));\n        setStats(Object.values(powerstats));\n      })\n      .catch(error => console.log(error));\n  }, []);\n\n  return (\n    <ReactModal className=\"modal\" isOpen={isOpen} onRequestClose={() => dispatch(open())}>\n      <CloseButton close={() => dispatch(open())} />\n      <h1 className=\"modal-title\">About Groot</h1>\n      <div className=\"flexbox\">\n        <ul>\n          {powers.map((power, index) => (\n            <li key={index}>{power}</li>\n          ))}\n        </ul>\n        <ul>\n          {stats.map((stat, index) => (\n            <li className=\"level-bar\" key={index}>\n              <div className=\"level-bar--fill\" style={{ width: stat + '%' }}>\n                {stat}%\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n      <p>\n        Groot (/ɡruːt/) is a fictional character appearing in American comic books published by\n        Marvel Comics. Created by Stan Lee, Larry Lieber and Jack Kirby, the character first\n        appeared in Tales to Astonish #13 (November 1960). An extraterrestrial, sentient tree-like\n        creature, the original Groot first appeared as an invader that intended to capture humans\n        for experimentation.\n      </p>\n      <p>\n        The character was reintroduced as a heroic, noble being in 2006, and appeared in the\n        crossover comic book storyline \"Annihilation: Conquest\". Groot went on to star in its\n        spin-off series, Guardians of the Galaxy, joining the team of the same name. Groot has been\n        featured in a variety of associated Marvel merchandise, including animated television\n        series, toys and trading cards. Vin Diesel voices Groot in the Marvel Cinematic Universe\n        films Guardians of the Galaxy (2014), Guardians of the Galaxy Vol. 2 (2017), Avengers:\n        Infinity War (2018), and Avengers: Endgame (2019), while Krystian Godlewski played the\n        character via performance capture in the first film. Fred Tatasciore voices Groot on the\n        Disney California Adventure ride Guardians of the Galaxy: Mission Breakout. Diesel will\n        return to voice the character in Guardians of the Galaxy Vol. 3. Diesel also voiced Groot as\n        a cameo in the 2018 Disney animated film Ralph Breaks the Internet. Since his film premiere\n        and animated series debut, Groot has become a pop culture icon, with his repeated line \"I am\n        Groot\" becoming an Internet meme.\n      </p>\n    </ReactModal>\n  );\n};\n\nexport default Modal;\n","import React from 'react';\nimport InfoButton from './components/Buttons/InfoButton';\nimport Character from './components/Character/Character';\nimport Controls from './components/Controls/Controls';\nimport Modal from './components/Modal/Modal';\n\nconst App = () => (\n  <>\n    <InfoButton />\n    <Character />\n    <Controls />\n    <Modal />\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const infoReducer = (state = false, action) => {\n  switch (action.type) {\n    case 'TRIGGER':\n      return !state;\n    default:\n      return state;\n  }\n};\n\nexport default infoReducer;\n","import { combineReducers } from 'redux';\nimport infoReducer from './info';\n\nconst allReducers = combineReducers({\n  isOpen: infoReducer,\n});\n\nexport default allReducers;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport allReducers from './reducers';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(allReducers);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}